name: Build, deploy, and rollback Python app to Azure Function App

env:
  AZURE_FUNCTIONAPP_NAME: pythonshashi
  PYTHON_VERSION: '3.12'
  HEALTHCHECK_URL_GRANT: 'https://abc.com/grant'
  HEALTHCHECK_URL_REMOVE: 'https://abc.com/remove'

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Set up dependency caching for faster installs
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Optional: Add a step to run tests here (PyTest, Django test suites, etc.)

      - name: Package application for deployment
        run: zip -r python-app.zip .

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: python-app.zip

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$latest_tag" ]; then
            echo "tag=0.0.0" >> $GITHUB_ENV
          else
            echo "tag=$latest_tag" >> $GITHUB_ENV

      - name: Calculate next version
        id: calculate_version
        run: |
          IFS='.' read -r -a version_parts <<< "${{ env.tag }}"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Create a new release tag
        id: create_tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false

      - name: 'Deploy to Azure Function App'
        id: deploy-to-functionapp
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          package: python-app.zip

      - name: Wait for deployment to stabilize
        run: sleep 30  # Adjust the sleep time if necessary

  health-check:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check Health Status - Grant
        id: health-check-grant
        run: |
          response=$(curl -s -X POST ${{ env.HEALTHCHECK_URL_GRANT }} -H "Content-Type: application/json" -d '{"objects":["12344","37383"],"SubId":"1727","ResGrp":"abc","AseName":"ahs","roledefinition":"avcjf"}')
          echo "Response: $response"
          echo "$response" > response_grant.json
          success=$(echo "$response" | jq -r '.objects[].operationSucess' | grep -v 'true' || true)
          if [[ -n $success ]]; then
            echo "Health check failed"
            exit 1
          else
            echo "Health check passed"

      - name: Prepare Remove Request Body
        id: prepare-remove-body
        run: |
          jq -c 'del(.objects[].operationResponse, .objects[].operationSucess)' response_grant.json > request_remove.json

      - name: Check Health Status - Remove
        id: health-check-remove
        run: |
          response=$(curl -s -X POST ${{ env.HEALTHCHECK_URL_REMOVE }} -H "Content-Type: application/json" -d @request_remove.json)
          echo "Response: $response"
          success=$(echo "$response" | jq -r '.objects[].operationSucess' | grep -v 'true' || true)
          if [[ -n $success ]]; then
            echo "Health check failed"
            exit 1
          else
            echo "Health check passed"

  approve-deployment:
    needs: health-check
    if: ${{ success() }}
    runs-on: ubuntu-latest
    environment:
      name: production
      reviewers: ['reviewer1', 'reviewer2']  # Replace with actual GitHub usernames
    steps:
      - name: Approval Step
        run: echo "Deployment to production requires approval"

  deploy-to-production:
    needs: approve-deployment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get latest tag
        run: git fetch --tags

      - name: Deploy to Production
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          package: python-app.zip

  rollback:
    needs: health-check
    if: ${{ failure() }}
    runs-on: ubuntu-latest

    steps:
      - name: Get previous release tag
        id: get-previous-tag
        run: |
          PREVIOUS_TAG=$(git describe --tags `git rev-list --tags --max-count=2` | tail -n1)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Checkout previous release
        run: |
          git fetch --tags
          git checkout ${{ env.PREVIOUS_TAG }}

      - name: Package application for deployment
        run: zip -r python-app.zip .

      - name: Upload artifact for rollback deployment
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: python-app.zip

      - name: 'Rollback to previous deployment'
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          package: python-app.zip
