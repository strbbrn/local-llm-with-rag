# Conventional Commit Validation

This repository enforces conventional commit messages to maintain a consistent and understandable commit history. This guide will help you understand the steps to follow to ensure your commits and pull requests (PRs) meet the required standards.

## Commit Message Format

Commit messages should follow the conventional commit format:


Where `<type>` is one of the following:

- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation changes
- `style`: Code style changes (formatting, missing semicolons, etc.)
- `refactor`: Refactoring code (neither new feature nor bug fix)
- `perf`: Performance improvements
- `test`: Adding or updating tests
- `chore`: Changes to the build process or auxiliary tools and libraries
- `BREAKING CHANGE`: A major change that affects backward compatibility

Example commit messages:

feat: add new authentication module
fix: resolve null pointer exception in user service
docs: update README with new API usage


## Setup Git Hooks

To ensure consistent commit message formatting, please run the following script after cloning the repository:

```sh
./setup-hooks.sh
